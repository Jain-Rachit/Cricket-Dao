{
  "language": "Solidity",
  "sources": {
    "contracts/Tickets.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Tickets is Ownable \r\n{\r\n    uint256 private numberOfgames;    \r\n    struct Ticket\r\n    {\r\n        string gamename;\r\n        uint256 seatNumber;\r\n        uint256 ticketPrice;\r\n        uint256 day;\r\n        uint256 month;\r\n        uint256 year;\r\n    }\r\n    \r\n    struct Game\r\n    {\r\n        string gamename;\r\n        uint256 numberOfTickets;\r\n        uint256 date;\r\n        uint256 month;\r\n        uint256 year;\r\n        mapping(uint => uint) tickets; //seatnumber to ticketprice\r\n    }\r\n    // Ticket[] private tickets;\r\n    // mapping(Game => uint) public gameticket;\r\n    // mapping(uint => Game) public gameticket;\r\n    // mapping(Game => tickets) public gametickets;\r\n    // Game[] private games;\r\n    \r\n    struct time\r\n    {\r\n        uint256 date;\r\n        uint256 month;\r\n        uint256 year;\r\n    }\r\n    mapping(uint256 => mapping(uint256 => mapping(uint256 =>mapping(string => Game) ))) games;\r\n    //year->month->date->gamename\r\n    function buytickets(string memory gamename,time memory t,uint256 seatnumber) public payable returns(Ticket memory)\r\n    {\r\n        Game storage g = games[t.year][t.month][t.date][gamename];\r\n        require(g.numberOfTickets>0,'No tickets left');\r\n        require(g.tickets[seatnumber] >0,'This seat is not for sale');\r\n        require(msg.value == g.tickets[seatnumber],'Amount is not equal to ticket price');\r\n        g.tickets[seatnumber] = 0;\r\n        g.numberOfTickets--;\r\n        Ticket memory tt = Ticket(g.gamename,seatnumber,g.tickets[seatnumber],g.date,g.month,g.year);\r\n        return tt;\r\n    }\r\n\r\n    function addtickets(string memory gamename,uint256 date,uint256 month, uint256 year,uint256 seatnumber, uint256 ticketprice) public onlyOwner\r\n    {\r\n        Game storage g = games[year][month][date][gamename];\r\n        if(g.tickets[seatnumber] == 0){\r\n            g.numberOfTickets++;\r\n        }\r\n        g.tickets[seatnumber]=ticketprice;\r\n        // tickets ticket = gametickets[g];\r\n        // for(int i=0;i<ticket.length;i++)\r\n        // {\r\n        //     require(ticket[i] != t,\"Ticket already exists\");            \r\n        // }\r\n        // ticket.push(t);\r\n        // gametickets[g] = ticket;\r\n        // return true;\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}