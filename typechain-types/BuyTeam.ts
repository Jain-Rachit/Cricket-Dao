/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace BuyTeam {
  export type BatsmanStruct = {
    innings: BigNumberish;
    highestscore: BigNumberish;
    halfcentury: BigNumberish;
    century: BigNumberish;
    scoringrate: BigNumberish;
  };

  export type BatsmanStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    innings: BigNumber;
    highestscore: BigNumber;
    halfcentury: BigNumber;
    century: BigNumber;
    scoringrate: BigNumber;
  };

  export type BolwerStruct = {
    overs: BigNumberish;
    wickets: BigNumberish;
    mostwickets: BigNumberish;
    economyrate: BigNumberish;
  };

  export type BolwerStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    overs: BigNumber;
    wickets: BigNumber;
    mostwickets: BigNumber;
    economyrate: BigNumber;
  };

  export type PlayerStruct = {
    number: BigNumberish;
    name: string;
    amount: BigNumberish;
    batsmanstats: BuyTeam.BatsmanStruct;
    bowlerstats: BuyTeam.BolwerStruct;
  };

  export type PlayerStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BuyTeam.BatsmanStructOutput,
    BuyTeam.BolwerStructOutput
  ] & {
    number: BigNumber;
    name: string;
    amount: BigNumber;
    batsmanstats: BuyTeam.BatsmanStructOutput;
    bowlerstats: BuyTeam.BolwerStructOutput;
  };
}

export interface BuyTeamInterface extends utils.Interface {
  contractName: "BuyTeam";
  functions: {
    "addplayers((uint256,string,uint256,(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256)))": FunctionFragment;
    "changeplayer((uint256,string,uint256,(uint256,uint256,uint256,uint256,uint256),(uint256,uint256,uint256,uint256)))": FunctionFragment;
    "owner()": FunctionFragment;
    "removeplayer(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "showplayers(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addplayers",
    values: [BuyTeam.PlayerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "changeplayer",
    values: [BuyTeam.PlayerStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeplayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showplayers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addplayers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeplayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeplayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showplayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface BuyTeam extends BaseContract {
  contractName: "BuyTeam";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BuyTeamInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addplayers(
      p: BuyTeam.PlayerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeplayer(
      p: BuyTeam.PlayerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeplayer(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    showplayers(
      jerseynumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BuyTeam.PlayerStructOutput]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addplayers(
    p: BuyTeam.PlayerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeplayer(
    p: BuyTeam.PlayerStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeplayer(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  showplayers(
    jerseynumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BuyTeam.PlayerStructOutput>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addplayers(
      p: BuyTeam.PlayerStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeplayer(
      p: BuyTeam.PlayerStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeplayer(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    showplayers(
      jerseynumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BuyTeam.PlayerStructOutput>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addplayers(
      p: BuyTeam.PlayerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeplayer(
      p: BuyTeam.PlayerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeplayer(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    showplayers(
      jerseynumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addplayers(
      p: BuyTeam.PlayerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeplayer(
      p: BuyTeam.PlayerStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeplayer(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    showplayers(
      jerseynumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
