/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Tickets {
  export type TimeStruct = {
    date: BigNumberish;
    month: BigNumberish;
    year: BigNumberish;
  };

  export type TimeStructOutput = [BigNumber, BigNumber, BigNumber] & {
    date: BigNumber;
    month: BigNumber;
    year: BigNumber;
  };

  export type TicketStruct = {
    gamename: string;
    seatNumber: BigNumberish;
    ticketPrice: BigNumberish;
    day: BigNumberish;
    month: BigNumberish;
    year: BigNumberish;
  };

  export type TicketStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    gamename: string;
    seatNumber: BigNumber;
    ticketPrice: BigNumber;
    day: BigNumber;
    month: BigNumber;
    year: BigNumber;
  };
}

export interface TicketsInterface extends utils.Interface {
  contractName: "Tickets";
  functions: {
    "addtickets(string,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "buytickets(string,(uint256,uint256,uint256),uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "showallticketsoftheday(uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addtickets",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "buytickets",
    values: [string, Tickets.TimeStruct, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "showallticketsoftheday",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addtickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buytickets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "showallticketsoftheday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Tickets extends BaseContract {
  contractName: "Tickets";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TicketsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addtickets(
      gamename: string,
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      seatnumber: BigNumberish,
      ticketprice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buytickets(
      gamename: string,
      t: Tickets.TimeStruct,
      seatnumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    showallticketsoftheday(
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[Tickets.TicketStructOutput[]]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addtickets(
    gamename: string,
    date: BigNumberish,
    month: BigNumberish,
    year: BigNumberish,
    seatnumber: BigNumberish,
    ticketprice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buytickets(
    gamename: string,
    t: Tickets.TimeStruct,
    seatnumber: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  showallticketsoftheday(
    date: BigNumberish,
    month: BigNumberish,
    year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<Tickets.TicketStructOutput[]>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addtickets(
      gamename: string,
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      seatnumber: BigNumberish,
      ticketprice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buytickets(
      gamename: string,
      t: Tickets.TimeStruct,
      seatnumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Tickets.TicketStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    showallticketsoftheday(
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<Tickets.TicketStructOutput[]>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    addtickets(
      gamename: string,
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      seatnumber: BigNumberish,
      ticketprice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buytickets(
      gamename: string,
      t: Tickets.TimeStruct,
      seatnumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    showallticketsoftheday(
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addtickets(
      gamename: string,
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      seatnumber: BigNumberish,
      ticketprice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buytickets(
      gamename: string,
      t: Tickets.TimeStruct,
      seatnumber: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    showallticketsoftheday(
      date: BigNumberish,
      month: BigNumberish,
      year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
